# Generated from Decaf.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2*")
        buf.write("\u00d9\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\3\2\3\2\3\2\3\2\3\2\3\2\3\3")
        buf.write("\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26")
        buf.write("\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34")
        buf.write("\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3%\3%\3%\3%\3%\3")
        buf.write("&\3&\3&\3&\3&\3&\3\'\3\'\3(\3(\3)\6)\u00d4\n)\r)\16)\u00d5")
        buf.write("\3)\3)\2\2*\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*\3\2\5\3\2\62;\4\2C\\c|\5\2\13\f\16\17\"")
        buf.write("\"\2\u00d9\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2")
        buf.write("\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2")
        buf.write("\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2")
        buf.write("\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#")
        buf.write("\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2")
        buf.write("\2\2\3S\3\2\2\2\5Y\3\2\2\2\7[\3\2\2\2\t]\3\2\2\2\13_\3")
        buf.write("\2\2\2\ra\3\2\2\2\17c\3\2\2\2\21j\3\2\2\2\23n\3\2\2\2")
        buf.write("\25s\3\2\2\2\27{\3\2\2\2\31\u0080\3\2\2\2\33\u0082\3\2")
        buf.write("\2\2\35\u0084\3\2\2\2\37\u0086\3\2\2\2!\u0088\3\2\2\2")
        buf.write("#\u008b\3\2\2\2%\u0090\3\2\2\2\'\u0096\3\2\2\2)\u009d")
        buf.write("\3\2\2\2+\u009f\3\2\2\2-\u00a1\3\2\2\2/\u00a3\3\2\2\2")
        buf.write("\61\u00a5\3\2\2\2\63\u00a7\3\2\2\2\65\u00a9\3\2\2\2\67")
        buf.write("\u00ab\3\2\2\29\u00ad\3\2\2\2;\u00af\3\2\2\2=\u00b2\3")
        buf.write("\2\2\2?\u00b5\3\2\2\2A\u00b8\3\2\2\2C\u00bb\3\2\2\2E\u00be")
        buf.write("\3\2\2\2G\u00c1\3\2\2\2I\u00c3\3\2\2\2K\u00c8\3\2\2\2")
        buf.write("M\u00ce\3\2\2\2O\u00d0\3\2\2\2Q\u00d3\3\2\2\2ST\7e\2\2")
        buf.write("TU\7n\2\2UV\7c\2\2VW\7u\2\2WX\7u\2\2X\4\3\2\2\2YZ\7}\2")
        buf.write("\2Z\6\3\2\2\2[\\\7\177\2\2\\\b\3\2\2\2]^\7=\2\2^\n\3\2")
        buf.write("\2\2_`\7]\2\2`\f\3\2\2\2ab\7_\2\2b\16\3\2\2\2cd\7u\2\2")
        buf.write("de\7v\2\2ef\7t\2\2fg\7w\2\2gh\7e\2\2hi\7v\2\2i\20\3\2")
        buf.write("\2\2jk\7k\2\2kl\7p\2\2lm\7v\2\2m\22\3\2\2\2no\7e\2\2o")
        buf.write("p\7j\2\2pq\7c\2\2qr\7t\2\2r\24\3\2\2\2st\7d\2\2tu\7q\2")
        buf.write("\2uv\7q\2\2vw\7n\2\2wx\7g\2\2xy\7c\2\2yz\7p\2\2z\26\3")
        buf.write("\2\2\2{|\7x\2\2|}\7q\2\2}~\7k\2\2~\177\7f\2\2\177\30\3")
        buf.write("\2\2\2\u0080\u0081\7*\2\2\u0081\32\3\2\2\2\u0082\u0083")
        buf.write("\7.\2\2\u0083\34\3\2\2\2\u0084\u0085\7+\2\2\u0085\36\3")
        buf.write("\2\2\2\u0086\u0087\7\60\2\2\u0087 \3\2\2\2\u0088\u0089")
        buf.write("\7k\2\2\u0089\u008a\7h\2\2\u008a\"\3\2\2\2\u008b\u008c")
        buf.write("\7g\2\2\u008c\u008d\7n\2\2\u008d\u008e\7u\2\2\u008e\u008f")
        buf.write("\7g\2\2\u008f$\3\2\2\2\u0090\u0091\7y\2\2\u0091\u0092")
        buf.write("\7j\2\2\u0092\u0093\7k\2\2\u0093\u0094\7n\2\2\u0094\u0095")
        buf.write("\7g\2\2\u0095&\3\2\2\2\u0096\u0097\7t\2\2\u0097\u0098")
        buf.write("\7g\2\2\u0098\u0099\7v\2\2\u0099\u009a\7w\2\2\u009a\u009b")
        buf.write("\7t\2\2\u009b\u009c\7p\2\2\u009c(\3\2\2\2\u009d\u009e")
        buf.write("\7?\2\2\u009e*\3\2\2\2\u009f\u00a0\7/\2\2\u00a0,\3\2\2")
        buf.write("\2\u00a1\u00a2\7#\2\2\u00a2.\3\2\2\2\u00a3\u00a4\7-\2")
        buf.write("\2\u00a4\60\3\2\2\2\u00a5\u00a6\7,\2\2\u00a6\62\3\2\2")
        buf.write("\2\u00a7\u00a8\7\61\2\2\u00a8\64\3\2\2\2\u00a9\u00aa\7")
        buf.write("\'\2\2\u00aa\66\3\2\2\2\u00ab\u00ac\7>\2\2\u00ac8\3\2")
        buf.write("\2\2\u00ad\u00ae\7@\2\2\u00ae:\3\2\2\2\u00af\u00b0\7>")
        buf.write("\2\2\u00b0\u00b1\7?\2\2\u00b1<\3\2\2\2\u00b2\u00b3\7@")
        buf.write("\2\2\u00b3\u00b4\7?\2\2\u00b4>\3\2\2\2\u00b5\u00b6\7?")
        buf.write("\2\2\u00b6\u00b7\7?\2\2\u00b7@\3\2\2\2\u00b8\u00b9\7#")
        buf.write("\2\2\u00b9\u00ba\7?\2\2\u00baB\3\2\2\2\u00bb\u00bc\7(")
        buf.write("\2\2\u00bc\u00bd\7(\2\2\u00bdD\3\2\2\2\u00be\u00bf\7~")
        buf.write("\2\2\u00bf\u00c0\7~\2\2\u00c0F\3\2\2\2\u00c1\u00c2\7)")
        buf.write("\2\2\u00c2H\3\2\2\2\u00c3\u00c4\7v\2\2\u00c4\u00c5\7t")
        buf.write("\2\2\u00c5\u00c6\7w\2\2\u00c6\u00c7\7g\2\2\u00c7J\3\2")
        buf.write("\2\2\u00c8\u00c9\7h\2\2\u00c9\u00ca\7c\2\2\u00ca\u00cb")
        buf.write("\7n\2\2\u00cb\u00cc\7u\2\2\u00cc\u00cd\7g\2\2\u00cdL\3")
        buf.write("\2\2\2\u00ce\u00cf\t\2\2\2\u00cfN\3\2\2\2\u00d0\u00d1")
        buf.write("\t\3\2\2\u00d1P\3\2\2\2\u00d2\u00d4\t\4\2\2\u00d3\u00d2")
        buf.write("\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d6\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d8\b)\2\2")
        buf.write("\u00d8R\3\2\2\2\4\2\u00d5\3\b\2\2")
        return buf.getvalue()


class DecafLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    Digit = 38
    Letter = 39
    SPACE = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'}'", "';'", "'['", "']'", "'struct'", "'int'", 
            "'char'", "'boolean'", "'void'", "'('", "','", "')'", "'.'", 
            "'if'", "'else'", "'while'", "'return'", "'='", "'-'", "'!'", 
            "'+'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", "'=='", 
            "'!='", "'&&'", "'||'", "'''", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "Digit", "Letter", "SPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "Digit", 
                  "Letter", "SPACE" ]

    grammarFileName = "Decaf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


